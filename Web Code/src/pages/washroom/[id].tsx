/* eslint-disable @next/next/no-sync-scripts */
import { type NextPage } from "next";
import Head from "next/head";
import { type GetServerSideProps } from "next";
import { db } from "@/utils/db";
import { doc, getDoc } from "firebase/firestore";
import { type Washroom } from "@/types/washroom";
import { FaExternalLinkAlt, FaSoap, FaWheelchair, FaBiohazard, FaBaby } from "react-icons/fa";
import { MdSanitizer, MdDry, MdEco } from "react-icons/md";
import { GiTowel } from "react-icons/gi";
import { TbToiletPaper } from "react-icons/tb";
import dynamic from "next/dynamic";
import Link from "next/link";
import axios from "axios";
import StarRating from "@/components/stars";
import { useState, type SyntheticEvent } from "react";
const MapWithNoSSR = dynamic(() => import("@/components/map"), {
  ssr: false,
});

const Washroom: NextPage<{
  washroom: string;
}> = ({ washroom: washroomstringified }) => {
  const [review, setReview] = useState<string>("");
  const washroom = JSON.parse(washroomstringified) as Washroom;
  console.log(washroom);
  const image = washroom.user_photos?.[0] || "/img/public.jpg";
  async function handleAddReview(e: SyntheticEvent) {
    e.preventDefault();
    if (review.length === 0) {
      alert("Please enter a review");
    } else {
      try {
        const res = await axios.post<{
          message: string;
        }>("/api/addrating", {
          id: washroom.id,
          review: review,
        });
        alert(res.data.message);
      } catch (error) {
        console.error(error);
      }
    }
  }
  const isSafe = washroom.isSafe ? "Safe" : "Not Safe";
  const isClean = washroom.isClean ? "Clean" : "Not Clean";
  const cleanclassName = washroom.isClean ? "clean" : "not-clean";
  const safeclassName = washroom.isSafe ? "safe" : "not-safe";

  return (
    <>
      <Head>
        <title>Washroom</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header className="l-header" id="header">
        <nav className="nav bd-container">
        <Link href={`/`} className="nav__logo">
        <img src="/img/logo.png" alt="" />
        </Link>

          <div className="nav__menu" id="nav-menu">
            <ul className="nav__list">
              <li className="nav__item">
              <Link href={`/`} className="nav__link">
                Home
              </Link>
              </li>
              <li className="nav__item">
              <Link href={`/search`} className="nav__link">
                Search
              </Link>
              </li>
              <li>
                <i
                  className="bx bx-toggle-left change-theme"
                  id="theme-button"
                ></i>
              </li>
            </ul>
          </div>

          <div className="nav__toggle" id="nav-toggle">
            <i className="bx bx-grid-alt"></i>
          </div>
        </nav>
      </header>
      <section className="washroom" id="washroom">
        <div className="washroom__container bd-container bd-grid">
          <h2 className="washroom__title"></h2>
          <div className="image-container">
            <img src={image} alt="" className="washroom__img" />
          </div>

          <div className="line"></div>
          <div className="result__rating"> </div>
          <div className="washroom-description decoration__data">
            <h4 className="washroom-description-title">About The Washroom</h4>
            <div className="tabs">
              {washroom.isSafe && (
                <div className={`tab ${safeclassName}`}> <span className="tab-title">{isSafe} </span>
                </div>
              )}
              {washroom.isClean && (
                <div className={`tab ${cleanclassName}`}> <span>{isClean}</span>
                </div>
              )}
            </div>
            <p className="washroom-description-text">{washroom.description}</p>
          </div>
          <div className="line"></div>
          <div className="washroom-amenities-icons-full-container">
            <h4 className="washroom-amenities-icons-title">Amenities</h4>
            <div className="flex items-center justify-center washroom-amenities-icons-full">
              {washroom.amenities["soap"] && (
                <FaSoap className="washroom-amenities-icons-icon-full" />
              )}
              {washroom.amenities["sanitizer"] && (
                <MdSanitizer className="washroom-amenities-icons-icon-full" />
              )}
              {washroom.amenities["accessible"] && (
                <FaWheelchair className="washroom-amenities-icons-icon-full" />
              )}
              {washroom.amenities["hand_dryer"] && (
                <MdDry className="washroom-amenities-icons-icon-full" />
              )}
              {washroom.amenities["eco_friendly"] && (
                <MdEco className="washroom-amenities-icons-icon-full" />
              )}
              {washroom.amenities["paper_towels"] && (
                <GiTowel className="washroom-amenities-icons-icon-full" />
              )}
              {washroom.amenities["medical_waste_disposal"] && (
                <FaBiohazard className="washroom-amenities-icons-icon-full" />
              )}
              {washroom.amenities["baby_changing_facilities"] && (
                <FaBaby className="washroom-amenities-icons-icon-full" />
              )}
              {washroom.amenities["sanitary_napking_disposal"] && (
                <TbToiletPaper className="washroom-amenities-icons-icon-full" />
              )}
            </div>
          </div>
          <div className="line"></div>
          <div className="ratings-container decoration__data ">
            <h4 className="washroom-ratings-container-title">Ratings</h4>
            <div className="star-group">
              {washroom.overall_rating && (
                <div className="star-group__item">
                  <span className="star-group__item-title">Overall {washroom.overall_rating} / 5 </span>
                  <div className="star-group__item-stars">
                    <StarRating
                      rating={washroom.overall_rating}
                      starDimension="20px"
                      starSpacing="2px"
                      starRatedColor="#FFC107"
                    />
                  </div>
                </div>
              )}
            </div>
            <div className="rating">Click Stars to Add Rating</div>
          </div>
          <div className="line"></div>
          <div className="review-section">
            <h4 className="review-section-title">Add Review</h4>
            <form id="review-form">
              <div className="text-form">
                <label htmlFor="name">Name</label>
                <input type="text" required name="name" id="name" />
              </div>
              <div className="text-form">
                <label>Write about your experience:</label>
                <textarea
                  name="review"
                  required
                  id="review"
                  cols={30}
                  rows={10}
                  value={review}
                  onChange={(e) => setReview(e.target.value)}
                ></textarea>
              </div>
              <button
                onClick={(e) => void handleAddReview(e)}
                className="submit-review button"
              >
                Submit Review
              </button>
            </form>
          </div>
          <div className="line"></div>
          <div className="action-buttons">
            <button className="get-emergency-assistance button">
              Emergency Assistance
            </button>
            <button className="get-report-option button">
              Report An Issue
            </button>
          </div>
          <div className="line"></div>
          <div className="map-div">
            <h2 className="get-washroom-directions">
              <Link
                href={`https://www.google.com/maps/dir/?api=1&destination=${washroom.location.latitude},${washroom.location.longitude}`} className='gmaps-title'
              >
                Click to Open in Google Maps
              </Link>
            </h2>
            <h4 className="washroom-map-title"></h4>
            <div id="map">
              <MapWithNoSSR
                lat={washroom.location.latitude}
                lng={washroom.location.longitude}
              />
            </div>
          </div>
        </div>
      </section>
      <section className="footer " id="contact_us">
          <div className="footer__container bd-container bd-grid">
            <div className="footer__social">
              <h2 className="text-white footer__title">
                Built at Solve for India Challenge 2023
              </h2>
              <h3 className="footer__title text-white">&#169; Celestial Biscuit</h3>
            </div>
          </div>
        </section>
    </>
  );
};

export default Washroom;

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { id } = context.query;
  if (!id) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }
  const docRef = doc(db, "washrooms_hygenie", id as string);
  const docSnap = await getDoc(docRef);
  if (!docSnap.exists()) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }
  const washroomWithId = { id: docSnap.id, ...docSnap.data() } as Washroom;
  const baseUrl = "https://rgaurisha.yaga.cf/predict";
  const res = await axios.get<{
    isClean: string;
    isSafe: string;
    txt: string;
  }>(baseUrl + "/" + String(washroomWithId.reviews));
  const finalWashroom = {
    ...washroomWithId,
    isClean: res.data.isClean,
    isSafe: res.data.isSafe,
    txt: res.data.txt,
  };
  const stringifiedWashroom = JSON.stringify(finalWashroom);
  return {
    props: {
      washroom: stringifiedWashroom,
    },
  };
};
